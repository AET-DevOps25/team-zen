# This workflow handles application deployment using Ansible
name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
  push:
    branches:
      - main
      - feat/aws-deployment
    paths:
      - 'client/**'
      - 'server/**'
      - 'genai/**'
      - 'docker-compose.yml'
      - 'ansible/**'
      - '.github/workflows/deploy_aws.yml'

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    # TODO: Add condition to only run if infrastructure is ready
    if: true
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

    steps:
      - name: Deployment Context
        run: |
          echo "## 🚀 Deployment Context" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "${{ github.event_name }}" in
            "workflow_run")
              echo "📋 **Triggered by:** Infrastructure workflow completion" >> $GITHUB_STEP_SUMMARY
              echo "🏗️ **Scenario:** Infrastructure changes → Deploy application" >> $GITHUB_STEP_SUMMARY
              ;;
            "workflow_dispatch")
              echo "📋 **Triggered by:** Manual workflow dispatch or CI/CD" >> $GITHUB_STEP_SUMMARY
              echo "🔄 **Scenario:** Application changes → Deploy to existing infrastructure" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "📋 **Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Setup Terraform (for outputs)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: infra
        run: terraform init

      - name: Get EC2 Instance Details
        id: ec2_info
        working-directory: infra
        run: |
          # Get EC2 public IP
          PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "")
          if [ -z "$PUBLIC_IP" ]; then
            echo "❌ Could not retrieve EC2 public IP from Terraform outputs"
            exit 1
          fi
          echo "ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

          # Get instance ID for health check
          INSTANCE_ID=$(terraform output -raw ec2_instance_id 2>/dev/null || echo "")
          if [ -n "$INSTANCE_ID" ]; then
            echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          fi

          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Wait for SSH to be available
        run: |
          timeout 120 bash -c '
            until nc -z ${{ steps.ec2_info.outputs.ip }} 22; do
              sleep 5
            done
          '

      - name: Create Ansible inventory
        run: |
          cat > ansible/inventory.ini << EOF
          [docker_server]
          ${{ steps.ec2_info.outputs.ip }}

          [docker_server:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=~/.ssh/private_key.pem
          ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          EOF

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Install Ansible collections
        run: |
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Setup SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 400 ~/.ssh/private_key.pem

      - name: Run Ansible Playbook
        id: ansible_deploy
        run: |
          ansible-playbook ansible/playbook.yml \
            -i ansible/inventory.ini \
            --extra-vars "github_actor=${{ github.actor }}" \
            --extra-vars "github_token=${{ secrets.GITHUB_TOKEN }}" \
            --extra-vars "genai_api_key=${{ secrets.GENAI_API_KEY }}" \
            --extra-vars "grafana_password=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" \
            --extra-vars "git_commit=${{ github.sha }}" \
            --extra-vars "git_branch=${{ github.ref_name }}" \
            --extra-vars "clerk_publishable_key=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" \
            --extra-vars "clerk_secret_key=${{ secrets.CLERK_SECRET_KEY }}" \
            --extra-vars "clerk_webhook_secret=${{ secrets.CLERK_WEBHOOK_SECRET }}"

      - name: Verify Deployment
        id: verify_deploy
        run: |
          # Wait for services to start
          sleep 15

          # Check if the application is responding
          if curl -f -s --max-time 30 http://${{ steps.ec2_info.outputs.ip }}:3000 > /dev/null 2>&1; then
            echo "✅ Application is responding"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Application health check failed"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/private_key.pem

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ steps.ec2_info.outputs.ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Ansible Deployment:** ${{ steps.ansible_deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** ${{ steps.verify_deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.ansible_deploy.outcome }}" = "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Application URL:** http://${{ steps.ec2_info.outputs.ip }}:3000" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed. Please check the logs.**" >> $GITHUB_STEP_SUMMARY
          fi
