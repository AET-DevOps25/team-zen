name: Deploy to EC2

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Push Docker Images"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    name: Deploy Application to EC2
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    env:
      EC2_PUBLIC_IP: ${{ vars.EC2_PUBLIC_IP }}

    steps:
      - name: Validate Configuration
        run: |
          echo "## 🔍 Validating Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          
          # Check required variables
          missing_vars=""
          
          if [ -z "${{ vars.EC2_PUBLIC_IP }}" ]; then
            missing_vars="$missing_vars EC2_PUBLIC_IP"
            echo "❌ Missing variable: EC2_PUBLIC_IP" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ EC2_PUBLIC_IP configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check required secrets (we can't check their values, but we can check if they're set)
          secrets_to_check=(
            "EC2_SSH_PRIVATE_KEY"
            "GENAI_API_KEY"
            "VITE_CLERK_PUBLISHABLE_KEY" 
            "CLERK_SECRET_KEY"
            "CLERK_WEBHOOK_SECRET"
            "GF_SECURITY_ADMIN_PASSWORD"
          )
          
          missing_secrets=""
          
          # Note: We can only check if secrets exist by trying to use them
          # GitHub doesn't provide a direct way to check if a secret is set
          
          if [ -n "$missing_vars" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Deployment Failed**: Missing required variables:$missing_vars" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please configure the missing variables in:" >> $GITHUB_STEP_SUMMARY
            echo "Repository Settings → Secrets and variables → Actions → Variables" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All required variables are configured" >> $GITHUB_STEP_SUMMARY

      - name: Deployment Context
        run: |
          echo "## 🚀 Deployment Context" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "**Target Server:** ${{ vars.EC2_PUBLIC_IP }}" >> $GITHUB_STEP_SUMMARY

      - name: Validate Secrets
        run: |
          echo "## 🔐 Validating Required Secrets" >> $GITHUB_STEP_SUMMARY
          
          missing_secrets=""
          
          # Check each required secret by testing if it's empty
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            missing_secrets="$missing_secrets EC2_SSH_PRIVATE_KEY"
            echo "❌ Missing secret: EC2_SSH_PRIVATE_KEY" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ EC2_SSH_PRIVATE_KEY configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "${{ secrets.GENAI_API_KEY }}" ]; then
            missing_secrets="$missing_secrets GENAI_API_KEY"
            echo "❌ Missing secret: GENAI_API_KEY" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ GENAI_API_KEY configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" ]; then
            missing_secrets="$missing_secrets VITE_CLERK_PUBLISHABLE_KEY"
            echo "❌ Missing secret: VITE_CLERK_PUBLISHABLE_KEY" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ VITE_CLERK_PUBLISHABLE_KEY configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "${{ secrets.CLERK_SECRET_KEY }}" ]; then
            missing_secrets="$missing_secrets CLERK_SECRET_KEY"
            echo "❌ Missing secret: CLERK_SECRET_KEY" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ CLERK_SECRET_KEY configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "${{ secrets.CLERK_WEBHOOK_SECRET }}" ]; then
            missing_secrets="$missing_secrets CLERK_WEBHOOK_SECRET"
            echo "❌ Missing secret: CLERK_WEBHOOK_SECRET" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ CLERK_WEBHOOK_SECRET configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" ]; then
            missing_secrets="$missing_secrets GF_SECURITY_ADMIN_PASSWORD"
            echo "❌ Missing secret: GF_SECURITY_ADMIN_PASSWORD" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ GF_SECURITY_ADMIN_PASSWORD configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "$missing_secrets" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Deployment Failed**: Missing required secrets:$missing_secrets" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please configure the missing secrets in:" >> $GITHUB_STEP_SUMMARY
            echo "Repository Settings → Secrets and variables → Actions → Secrets" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All required secrets are configured" >> $GITHUB_STEP_SUMMARY

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ vars.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o ConnectTimeout=10 ubuntu@${{ vars.EC2_PUBLIC_IP }} "echo 'SSH connection successful'"

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Create Dynamic Inventory
        run: |
          cat > ansible/dynamic_inventory.ini << EOF
          [docker_server]
          ${{ vars.EC2_PUBLIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/ec2_key.pem
          EOF

      - name: Test Ansible Connection
        run: |
          ansible -i ansible/dynamic_inventory.ini docker_server -m ping

      - name: Deploy Application with Ansible
        run: |
          ansible-playbook -i ansible/dynamic_inventory.ini ansible/playbook.yml \
            -e github_actor="${{ github.actor }}" \
            -e github_token="${{ secrets.GITHUB_TOKEN }}" \
            -e genai_api_key="${{ secrets.GENAI_API_KEY }}" \
            -e clerk_publishable_key="${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" \
            -e clerk_secret_key="${{ secrets.CLERK_SECRET_KEY }}" \
            -e clerk_webhook_secret="${{ secrets.CLERK_WEBHOOK_SECRET }}" \
            -e grafana_password="${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" \
            -v

      - name: Verify Deployment
        run: |
          echo "## 🔍 Deployment Verification" >> $GITHUB_STEP_SUMMARY
          
          # Check if services are running
          ssh -i ~/.ssh/ec2_key.pem ubuntu@${{ vars.EC2_PUBLIC_IP }} "cd /home/ubuntu/app && docker compose ps" || true
          
          # Test endpoints
          echo "Testing application endpoints..." >> $GITHUB_STEP_SUMMARY
          
          # Wait a bit for services to start
          sleep 30
          
          # Test if services are responding
          if curl -f http://${{ vars.EC2_PUBLIC_IP }}:3000 >/dev/null 2>&1; then
            echo "✅ Frontend is responding" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend is not responding" >> $GITHUB_STEP_SUMMARY
          fi
          
          if curl -f http://${{ vars.EC2_PUBLIC_IP }}:8085/health >/dev/null 2>&1; then
            echo "✅ API Gateway is responding" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ API Gateway is not responding" >> $GITHUB_STEP_SUMMARY
          fi
          
          if curl -f http://${{ vars.EC2_PUBLIC_IP }}:3001 >/dev/null 2>&1; then
            echo "✅ Grafana is responding" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Grafana is not responding" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** http://${{ vars.EC2_PUBLIC_IP }}:3000" >> $GITHUB_STEP_SUMMARY
          echo "- **API Gateway:** http://${{ vars.EC2_PUBLIC_IP }}:8085" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana:** http://${{ vars.EC2_PUBLIC_IP }}:3001" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus:** http://${{ vars.EC2_PUBLIC_IP }}:9090" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify all services are running correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Check application logs if needed: \`ssh -i ~/.ssh/ec2_key.pem ubuntu@${{ vars.EC2_PUBLIC_IP }} 'cd /home/ubuntu/app && docker compose logs'\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor application performance via Grafana dashboard" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/ec2_key.pem
