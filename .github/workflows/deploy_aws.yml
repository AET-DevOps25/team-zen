# This workflow handles application deployment using Ansible
name: Deploy Application

on:
  push:
    branches:
      - main
      - feat/aws-deployment
    paths:
      - "client/**"
      - "server/**"
      - "genai/**"
      - "docker-compose.yml"
      - "ansible/**"
      - ".github/workflows/deploy_aws.yml"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if infrastructure check fails"
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    env:
      tf_actions_working_dir: ./infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Setup Terraform (for outputs)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: infra
        run: terraform init

      - name: Verify Infrastructure Exists
        id: verify_infra
        working-directory: infra
        run: |
          # Check if infrastructure is deployed
          if terraform show | grep -q "aws_instance"; then
            echo "Infrastructure exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Infrastructure not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Infrastructure Check
        if: steps.verify_infra.outputs.exists != 'true' && github.event.inputs.force_deploy != 'true'
        run: |
          echo "❌ Infrastructure not found or not properly deployed."
          echo "Please run the infrastructure workflow first or use 'force_deploy' option."
          echo "You can trigger the infrastructure workflow manually from the Actions tab."
          exit 1

      - name: Get EC2 Instance Details
        id: ec2_info
        working-directory: infra
        run: |
          # Get EC2 public IP
          PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "")
          if [ -z "$PUBLIC_IP" ]; then
            echo "❌ Could not retrieve EC2 public IP from Terraform outputs"
            exit 1
          fi
          echo "ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

          # Get instance ID for health check
          INSTANCE_ID=$(terraform output -raw ec2_instance_id 2>/dev/null || echo "")
          if [ -n "$INSTANCE_ID" ]; then
            echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          fi

          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Verify EC2 Instance is Running
        if: steps.ec2_info.outputs.instance_id != ''
        run: |
          INSTANCE_STATE=$(aws ec2 describe-instances \
            --instance-ids ${{ steps.ec2_info.outputs.instance_id }} \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text)

          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "❌ EC2 instance is not running. Current state: $INSTANCE_STATE"
            exit 1
          fi
          echo "✅ EC2 instance is running"

      - name: Wait for SSH to be available
        run: |
          echo "Waiting for SSH to be available on ${{ steps.ec2_info.outputs.ip }}..."
          timeout 300 bash -c '
            until nc -z ${{ steps.ec2_info.outputs.ip }} 22; do
              echo "Waiting for SSH..."
              sleep 5
            done
          '
          echo "✅ SSH is available"

      - name: Create Ansible inventory
        run: |
          mkdir -p ansible
          cat > ansible/inventory.ini << EOF
          [docker_server]
          ${{ steps.ec2_info.outputs.ip }}

          [docker_server:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=~/.ssh/private_key.pem
          ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          EOF

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Setup SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 400 ~/.ssh/private_key.pem

      - name: Test Ansible connection
        run: |
          ansible docker_server -i ansible/inventory.ini -m ping
        continue-on-error: true

      - name: Run Ansible Playbook
        id: ansible_deploy
        run: |
          echo "Starting deployment at $(date)"
          ansible-playbook ansible/playbook.yml \
            -i ansible/inventory.ini \
            --extra-vars "deployment_timestamp=$(date +%Y%m%d_%H%M%S)" \
            --extra-vars "git_commit=${{ github.sha }}" \
            --extra-vars "git_branch=${{ github.ref_name }}" \
            -v

      - name: Verify Deployment
        id: verify_deploy
        run: |
          # Wait a moment for services to start
          sleep 10

          # Check if the application is responding
          if curl -f -s --max-time 30 http://${{ steps.ec2_info.outputs.ip }}:80 > /dev/null 2>&1; then
            echo "✅ Application is responding on port 80"
            echo "success=true" >> $GITHUB_OUTPUT
          elif curl -f -s --max-time 30 http://${{ steps.ec2_info.outputs.ip }}:3000 > /dev/null 2>&1; then
            echo "✅ Application is responding on port 3000"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Application health check failed, but deployment may still be in progress"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/private_key.pem

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ steps.ec2_info.outputs.ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure Check:** ${{ steps.verify_infra.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ansible Deployment:** ${{ steps.ansible_deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** ${{ steps.verify_deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.ansible_deploy.outcome }}" = "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Application URL:** http://${{ steps.ec2_info.outputs.ip }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed. Please check the logs.**" >> $GITHUB_STEP_SUMMARY
          fi
